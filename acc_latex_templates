#!/usr/bin/env bash
#
# The main script that prompts user selection, processes inputs, and performs
# the file manipulation
#
# Please see https://github.com/qcr/latex_templates for full details on how
# things work, and instructions on how to add your own templates. The more
# templates the merrier!
# 
# Developed by: J. Mount, j.mount@qut.edu.au
# Updated by: D. Gunasinghe, dasun.gunasinghe@qut.edu.au
# Last updated: 10-January-2023

################################################################################
############################### Global settings ################################
################################################################################

TMP_LOCATION="/tmp/acc_latex_templates"


SOURCE_LOCATION="$([ -z "${LOCAL_LOCATION:-}" ] && echo "$TMP_LOCATION" \
  || echo "$LOCAL_LOCATION")"

################################################################################
################################# Main script ##################################
################################################################################

# Error if bash is too old
if [ "$(echo $BASH_VERSION | sed 's/^\([0-9]\)*\..*/\1/')" -lt 4 ]; then
  printf "ERROR: %s\n\t%s\n" "Bash version 4.0+ is required. Detected:" \
    "$BASH_VERSION"
  exit 1
fi

# Get a local copy of the templates repo
heading "Getting latest templates"
if [ -d "$TMP_LOCATION" ]; then rm -rf "$TMP_LOCATION"; fi
mkdir -p "$TMP_LOCATION"
git clone --depth 1 -b main https://github.com/AustralianCoboticsCentre/latex-templates \
  "$TMP_LOCATION"
printf "Done\n"

# Each directory denotes a valid template, process the user's selection
template="${1:-}"
templates=($(find "$SOURCE_LOCATION" -mindepth 1 -maxdepth 1 -type d \
  -not -name '.*' -exec basename {} \;))
if [ -z "$template" ] || ! printf '%s\n' "${templates[@]}" | \
    grep -q "^$1$"; then
  selection=0
  while [ "$selection" -eq 0 ] || [ "$selection" -gt "${#templates[@]}" ]; do
    printf "\n\e[33m%s\n" \
      "Invalid template provided ('${1:-}'). Select from the options:"
      for i in "${!templates[@]}"; do 
        printf "\n\t[$((i+1))] %s" "${templates[i]}"
      done
    printf "\n\nSelection: \e[0m"
    read -n1 selection
    if ! [[ "$selection" =~ ^[0-9]+$ ]]; then selection=0; fi
  done
  template="${templates[$((selection-1))]}"
  printf "\n\nProceeding with '$template'...\n"
fi


# Create from template in local directory
heading "Creating project from template"
rsync -avL "$SOURCE_LOCATION/$template/" .